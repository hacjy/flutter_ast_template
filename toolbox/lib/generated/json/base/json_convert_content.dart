// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:toolbox/tool/http/login_result_info_entity.dart';
import 'package:toolbox/generated/json/login_result_info_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case LoginResultInfoEntity:
			return loginResultInfoEntityFromJson(data as LoginResultInfoEntity, json) as T;			case LoginResultInfoUser:
			return loginResultInfoUserFromJson(data as LoginResultInfoUser, json) as T;			case LoginResultInfoStatus:
			return loginResultInfoStatusFromJson(data as LoginResultInfoStatus, json) as T;			case LoginResultInfoExtra:
			return loginResultInfoExtraFromJson(data as LoginResultInfoExtra, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case LoginResultInfoEntity:
			return loginResultInfoEntityToJson(data as LoginResultInfoEntity);			case LoginResultInfoUser:
			return loginResultInfoUserToJson(data as LoginResultInfoUser);			case LoginResultInfoStatus:
			return loginResultInfoStatusToJson(data as LoginResultInfoStatus);			case LoginResultInfoExtra:
			return loginResultInfoExtraToJson(data as LoginResultInfoExtra);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'LoginResultInfoEntity':
			return LoginResultInfoEntity().fromJson(json);			case 'LoginResultInfoUser':
			return LoginResultInfoUser().fromJson(json);			case 'LoginResultInfoStatus':
			return LoginResultInfoStatus().fromJson(json);			case 'LoginResultInfoExtra':
			return LoginResultInfoExtra().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'LoginResultInfoEntity':
			return List<LoginResultInfoEntity>();			case 'LoginResultInfoUser':
			return List<LoginResultInfoUser>();			case 'LoginResultInfoStatus':
			return List<LoginResultInfoStatus>();			case 'LoginResultInfoExtra':
			return List<LoginResultInfoExtra>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}